#include "myShell.h"

int main(int argc, char **argv){
    char command[COMMAND_BUFFER];
    int i;

    initPath(dir_path);

    signal(SIGINT, SIG_IGN);
    signal(SIGQUIT, SIG_IGN);

    while(1){
        fputs("% ",stdout); //% print
        fgets(command, COMMAND_BUFFER -1, stdin); // input command for user
        command[strlen(command)-1] = '\0'; // delete \n

#ifdef DEBUG
        printf("command : %s \n", command);
#endif
        
        run(command); //run return value handle!!!!
    }

    return 0;
}

int run(char *command){//{{{
    int cmd_count, n, pid;
    char file_path[128];

    if( ( cmd_count = tokenize(command, cmdList) ) == 0 )//return token count
        return 0;

    for(n = 0; n < cmd_count; n++){

        strcpy(file_path, cmdList[n].tok[0]); //cToken[0] : filename -> file_path

        if( specialCommand(cmdList[n].tok) == -1 ){ // setpath.. cd... exit
            perror("specialCommand: ");
            return -1;
        }

        if( accessCheck(dir_path, file_path) == 0 ){ // file exit

            if( (pid = fork()) < 0) {
                perror ("fork() : ");
                exit(-2);
            }
            if( pid == 0) { // * child
                switch(cmdList[n].type) {
                    case PP :
                        if( pipePerform(&cmdList[n], &cmdList[++n], &n) == -1 )
                            exit(-1);
                        break;
                    default :
                        execv(file_path, cmdList[n].tok);
                        perror("execve(): ");
                        exit(0);
                }
            }
            else if( pid > 0 ) // parent
            {
                if ( cmdList[n].type != BG )
                    wait((int*)0);
            }
        }
        else
            fprintf(stderr,"command not found\n");
    }
    return 0;
}//}}} 

int accessCheck(char **dir_path, char *file_path){ //{{{ filename -> file path
    char filename[256];

    strcpy(filename, file_path); // filename copy

    while(*dir_path)
    {
        strcpy(file_path, *dir_path++);
        strcat(file_path, filename);

        if(access(file_path, 0) == 0){ // access return value 0
#ifdef DEBUG
            printf("[accessCheck] : %s file exists !! \n", file_path);
#endif
            return 0;
        }
    }
#ifdef DEBUG
            printf("[accessCheck] : file not found !!\n");
#endif
            return -1;
}//}}}

int setpath(char **path, char **cTok){ // {{{ cToken[0] == setpath 

    while(*++cTok){
        while(*path){path++;} //path null
        *path = malloc(strlen(*cTok)+2); // 2 => slash  require free!!!
        strcpy(*path, *cTok);

        //add slash
        if( *( (*path) + strlen(*path)-1 ) != '/')
            strcat(*path,"/");
#ifdef DEBUG
            printf("[setpath] : %s \n", *path);
#endif
    }

    return 0;
} //}}}

int initPath(char **path){//{{{
    char initFile[256], tmp[256];
    int tmpLen;
    FILE *fp;

    strcpy(initFile, getenv("HOME"));
    strcat(initFile, "/.myShellRc");

#ifdef DEBUG
    printf("[initPath] initFile : %s \n", initFile);
#endif

    if( (fp = fopen(initFile, "r"))  == NULL){
        fprintf(stderr, "init file open fail ! \n");
        return 1;
    }

    while( fgets(tmp, 256, fp) != NULL){
        tmpLen = strlen(tmp);
        
        tmp[ tmpLen - 1 ] = '\0';

        if(tmp[ tmpLen - 2 ] != '/')
            strcat(tmp, "/");

#ifdef DEBUG
        printf("[initPath] : %s \n", tmp);
#endif
        while(*path){path++;} //path null

        *path = malloc(tmpLen); 
        strcpy(*path, tmp);
    }

    return 0;
}//}}}

int tokenize(char *command, struct COMMAND *cmdList){///{{{
    int t_idx = 0, com_idx =0, delim_flag =1, cmd_count =0;

#ifdef DEBUG
    int i = 0, j;
#endif

    while ( command[com_idx] && ( t_idx < MAX_TOKEN ) ){
        switch(command[com_idx]){

            case '&':
                cmdList[cmd_count].type = BG;
                cmdList[cmd_count++].tok[t_idx] = NULL;
                t_idx = 0;
                delim_flag = 1;
                command[com_idx] = '\0';
                break;

            case '|':
                cmdList[cmd_count].type = PP;
                cmdList[cmd_count++].tok[t_idx] = NULL;
                t_idx = 0;
                delim_flag = 1;
                command[com_idx] = '\0';
                break;

            case ';':
                cmdList[cmd_count].type = NL;
                cmdList[cmd_count++].tok[t_idx] = NULL;
                t_idx = 0;
                delim_flag = 1;
                command[com_idx] = '\0';
                break;

            case ' ':
                delim_flag = 1;
                command[com_idx] = '\0';
                break;

            default :
                if (delim_flag){
                    cmdList[cmd_count].tok[t_idx++] = (command + com_idx);
                    delim_flag = 0;
                }
                break;
        }
        com_idx++;
    }

    printf("cmdList[%d].tok[0]= %d \n", cmd_count, cmdList[cmd_count].tok[0]);
    if( cmdList[cmd_count].tok[0] == NULL )
        cmd_count--;

#ifdef DEBUG
    for(j = 0 ; j < cmd_count+1 ; i=0, j++){
        while( cmdList[j].tok[i] )
            printf("[tokenize] cmdList[%d][%d] : %s \n", j, i, cmdList[j].tok[i++]);

    }
    printf("cmd_count = %d \n",cmd_count +1);
#endif 

    return cmd_count+1 ;
}///}}}

int specialCommand(char **cTok){///{{{
        if(!strcmp("setpath", *cTok)) {
            setpath(dir_path, cTok);
            return 0;
        }

        else if(!strcmp("exit",*cTok))
            exit(-1);

        else if(!strcmp("cd",*cTok)){
            if( chdir(*(cTok + 1)) == -1)
                perror(*(cTok + 1));
            return 0;
        }
}///}}}

int pipePerform(struct COMMAND *send, struct COMMAND *recv, int *n){
    int pfd[2];
    char sd_file[MAX_PATH];
    char rv_file[MAX_PATH];

    strcpy(sd_file, send->tok[0]);
    strcpy(rv_file, recv->tok[0]);

    if(accessCheck(dir_path, sd_file) == -1){
            fprintf(stderr,"[accessCheck] : %s_file not found !!\n", sd_file);
            return -1;
    }
    if(accessCheck(dir_path, rv_file) == -1){
            fprintf(stderr,"[accessCheck] : %s_file not found !!\n", rv_file);
            return -1;
    }

    if( pipe(pfd) == -1 ) {
        perror("pipe: ");
        exit(-1);
    }

    switch(fork()){
        case -1 : // fail
            perror("fork()");
            return -1;

        case 0 : //child
            close(1);
            dup(pfd[1]);
            close(pfd[0]); close(pfd[1]);
            execv(sd_file, send->tok);
            return -1;

        default : //parent
            close(0);
            dup(pfd[0]);
            close(pfd[0]); close(pfd[1]);
            execv(rv_file, recv->tok);
    }
}
